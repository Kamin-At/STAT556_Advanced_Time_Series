z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 100000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 100000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
length(losses[which(losses>0)])
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
length(losses[which(losses>0)])
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100, xlim=3*10^9)
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100, xlim=300000000)
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100, xlim=(0,300000000))
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100, xlim=c(0,300000000))
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 1000000
rho = 0.3
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 1000000
rho = 0.4
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 1000000
rho = 0.4
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
library("stats")
n_trial = 1000000
rho = 0.4
n_asset = 100
DtD = 2.326#From 6.a
loan_amt = 10000000
losses = rep(-1, n_trial)
for (i in 1:n_trial){
m = rnorm(1)
z_vector = DtD - (m * sqrt(rho) + sqrt(1 - rho) * rnorm(n_asset))
z_vector = z_vector[which(z_vector <= 0)]
tmp_loss = length(z_vector) * sum((1 - pbeta(runif(length(z_vector)),
shape1=2, shape2=2,
lower.tail = TRUE, log=FALSE)) * loan_amt)
losses[i] = tmp_loss
}
hist(losses, 100)
setwd("C:/min/coding_project/STAT556_Advanced_Time_Series/HW1_ARIMA")
read.csv("m-ew6299-1.txt")
data = read.csv("m-ew6299-1.txt")
data
arima(data, order=c(0,1,2))
data = read.csv("m-ew6299-1.txt")
arima(data, order=c(1,0,0))
data = read.csv("m-ew6299-1.txt")
arima(data, order=c(2,0,0))
acf(data)
acf(data, "data")
acf(data)
acf("data",data)
acf(data)
pacf(data)
acf(data)
acf(data)
pacf(data)
acf(data)
data = read.csv("m-ew6299-1.txt")
arima(data, order=c(1,0,0))
arima(data, order=c(0,0,1))
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
arima(data, order=c(1,0,0))
#MA(1)
arima(data, order=c(0,0,1))
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
predict(ar_model, n.ahead = 1)
predict(ar_model, n.ahead = 2)
#MA(1)
ma_model = arima(data, order=c(0,0,1))
predict(ma_model, n.ahead = 1)
predict(ma_model, n.ahead = 2)
predict(ma_model, n.ahead = 2)
clc
clear
predict(ma_model, n.ahead = 2)
predict(ma_model, n.ahead = 1)
predict(ma_model, n.ahead = 2)
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
predict(ar_model, n.ahead = 2)
#MA(1)
ma_model = arima(data, order=c(0,0,1))
predict(ma_model, n.ahead = 2)
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
ar_model
predict(ar_model, n.ahead = 2)
#MA(1)
ma_model = arima(data, order=c(0,0,1))
ma_model
predict(ma_model, n.ahead = 2)
data = read.csv("q-gdpdef-1.txt")
data
data["gdpdef"]
data[,"gdpdef"]
data.gdpdef
data.frame("gdpdef")
data[,"gdpdef"]
data[,'gdpdef']
data[,gdpdef]
data$gdpdef
data = read.csv("q-gdpdef-1.txt")
data$gdpdef
data
data$.gdpdef
data$column
data
data[,1]
data = read.csv("q-gdpdef-1.txt",sep="\t")
data
data$year.mom.day.gdpdef
data = read.csv("q-gdpdef-1.txt",sep="\s")
data = read.csv("q-gdpdef-1.txt",sep=" ")
data = read.csv("q-gdpdef-1.txt",sep="\t")
data
data = read.csv("q-gdpdef-1.txt",sep="\t", header=TRUE)
data
data$year.mom.day.gdpdef
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
data
data$gdpdef
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(data$gdpdef)
acf(data$gdpdef)
pacf(data$gdpdef)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(data$gdpdef.diff())
diff(data$gdpdef)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(data$gdpdef))
acf(data$gdpdef)
pacf(data$gdpdef)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(data$gdpdef)
# pacf(data$gdpdef)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
acf(diff(diff(data$gdpdef)))
pacf(diff(diff(data$gdpdef)))
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(diff(data$gdpdef))))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
acf(diff(diff(data$gdpdef)))
pacf(diff(diff(data$gdpdef)))
auto.arima(data$gdpdef)
arima(data$gdpdef)
Box.Ljung.Test(data$gdpdef, lag = 1)
source("~/.active-rstudio-document", echo=TRUE)
Box.Ljung.Test(data$gdpdef, lag = 1)
package(Box)
library(LSLS)
library(LSTS)
Box.Ljung.Test(data$gdpdef, lag = 1)
Box.Ljung.Test(data$gdpdef, lag = 10)
Box.Ljung.Test(data$gdpdef, lag = 10)
data.size
data.shape
shape(data)
size(data)
length(data)
len(data)
shape(data)
dim(data)
Box.Ljung.Test(data$gdpdef, lag = 10)
Box.Ljung.Test(diff(data$gdpdef), lag = 10)
Box.Ljung.Test(diff(diff(data$gdpdef)), lag = 10)
Box.Ljung.Test(diff(diff(diff(data$gdpdef))), lag = 10)
data = read.csv("m-ew6299-1.txt",sep="", header=TRUE)
data
plot(data)
plot(c(1, length(data)),data)
c(1, length(data))
range(1, length(data))
length(data)
data.dim
dim(data)
dim(data)[0]
dim(data)[1]
range(1, dim(data)[1])
range(1,1, dim(data)[1])
range(c(1,1, dim(data)[1]))
range(c(1, dim(data)[1]))
1:dim(data)[1]
plot(1:dim(data)[1],data)
plot(1:dim(data)[1],data[1])
data[1]
1:455
plot(1:455,data[1])
dim(data[2])
dim(data[1])
dim(data[1][1])
as.vector(data)
plot(1:455,as.vector(data))
1:455
plot(1:455,as.vector(data))
length(1:455)
length(as.vector(data))
length(as.vector(data))
as.vector(data)[1]
length(as.vector(data)[1])
plot(1:455,as.vector(data))
data
data = read.csv("m-ew6299-1.txt",sep="")
data = read.csv("m-ew6299-1.txt")
data = read.csv("m-ew6299-1.txt", header=FALSE)
data
plot(1:455,data$V1)
plot(1:456,data$V1)
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
ar_model
predict(ar_model, n.ahead = 2)
checkresiduals(ar_model)
data = read.csv("m-ew6299-1.txt")
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
ar_model
predict(ar_model, n.ahead = 2)
residuals(ar_model)
#MA(1)
ma_model = arima(data, order=c(0,0,1))
ma_model
predict(ma_model, n.ahead = 2)
#In terms of AIC, MA(1) model better fits the data.
residuals(ma_model)
dim(residuals(ma_model))
length(residuals(ma_model))
data = read.csv("m-ew6299-1.txt", header=FALSE)
acf(data)
pacf(data)
#AR(1)
ar_model = arima(data, order=c(1,0,0))
ar_model
predict(ar_model, n.ahead = 2)
residuals(ar_model)
#MA(1)
ma_model = arima(data, order=c(0,0,1))
ma_model
predict(ma_model, n.ahead = 2)
#In terms of AIC, MA(1) model better fits the data.
residuals(ma_model)
plot(1:466, residuals(ma_model))
plot(1:456, residuals(ma_model))
plot(1:456, residuals(ar_model))
plot(1:456, residuals(ma_model))
Box.Ljung.Test(residuals(ma_model), lag = 10)
Box.Ljung.Test(residuals(ar_model), lag = 10)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
library(forecast)
fit <- auto.arima(data,max.p = 5,max.q = 5,max.P = 5,max.Q = 5,max.d = 3,seasonal = TRUE,ic = 'aic')
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
library(forecast)
fit <- auto.arima(data$gdpdef,max.p = 5,max.q = 5,max.P = 5,max.Q = 5,max.d = 3,seasonal = TRUE,ic = 'aic')
plot(forecast(fit,h=20))
fit
residuals(fit)
plot(1:length(data$gdpdef), residuals(fit))
Box.Ljung.Test(residuals(fit), lag = 10)
source("~/.active-rstudio-document", echo=TRUE)
Box.Ljung.Test(residuals(fit), lag = 10)fit
fit
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
library(forecast)
fit <- auto.arima(data$gdpdef,max.p = 10,max.q = 10, max.d = 10,seasonal = TRUE,ic = 'bic')
plot(forecast(fit,h=20))
Box.Ljung.Test(residuals(fit), lag = 10)
data = read.csv("q-gdpdef-1.txt",sep="", header=TRUE)
plot(diff(diff(data$gdpdef)))
# acf(diff(diff(data$gdpdef)))
# pacf(diff(diff(data$gdpdef)))
library(forecast)
fit <- auto.arima(data$gdpdef,max.p = 10,max.q = 10, max.d = 10,seasonal = TRUE,ic = 'bic')
plot(forecast(fit,h=20))
Box.Ljung.Test(residuals(fit), lag = 20)
acf(residuals(fit))
pacf(residuals(fit))
data
forecast(fit,h=4)
predict(fit,h=4)
forecast(fit,h=4)
---
title: "ARIMA_2_15"
---
title: "ARIMA_2_15"
